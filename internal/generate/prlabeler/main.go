//go:build generate
// +build generate

package main

import (
	"bytes"
	"encoding/csv"
	"log"
	"os"
	"sort"
	"text/template"
)

const filename = `../../../.github/labeler-pr-triage.yml`

type ServiceDatum struct {
	ProviderPackage string
	ActualPackage   string
	FilePrefix      string
	DocPrefix       string
}

type TemplateData struct {
	Services []ServiceDatum
}

const (
	// column indices of CSV
	//awsCLIV2Command         = 0
	//awsCLIV2CommandNoDashes = 1
	//goV1Package             = 2
	//goV2Package             = 3
	//providerPackageActual   = 4
	//providerPackageCorrect  = 5
	//splitPackageRealPackage = 6
	//aliases                 = 7
	//providerNameUpper       = 8
	//goV1ClientName          = 9
	//skipClientGenerate      = 10
	//sdkVersion              = 11
	//resourcePrefixActual    = 12
	//resourcePrefixCorrect   = 13
	//filePrefix              = 14
	//docPrefix               = 15
	//humanFriendly           = 16
	//brand                   = 17
	//exclude                 = 18
	//allowedSubcategory      = 19
	//deprecatedEnvVar        = 20
	//envVar                  = 21
	//note                    = 22
	providerPackageActual   = 4
	providerPackageCorrect  = 5
	splitPackageRealPackage = 6
	filePrefix              = 14
	docPrefix               = 15
	exclude                 = 18
	allowedSubcategory      = 19
)

func main() {
	f, err := os.Open("../../../names/names_data.csv")
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	csvReader := csv.NewReader(f)

	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	td := TemplateData{}

	for i, l := range data {
		if i < 1 { // no header
			continue
		}

		if l[exclude] != "" && l[allowedSubcategory] == "" {
			continue
		}

		if l[providerPackageActual] == "" && l[providerPackageCorrect] == "" {
			continue
		}

		p := l[providerPackageCorrect]

		if l[providerPackageActual] != "" {
			p = l[providerPackageActual]
		}

		ap := p

		if l[splitPackageRealPackage] != "" {
			ap = l[splitPackageRealPackage]
		}

		s := ServiceDatum{
			ProviderPackage: p,
			ActualPackage:   ap,
			FilePrefix:      l[filePrefix],
			DocPrefix:       l[docPrefix],
		}

		td.Services = append(td.Services, s)
	}

	sort.SliceStable(td.Services, func(i, j int) bool {
		return td.Services[i].ProviderPackage < td.Services[j].ProviderPackage
	})

	writeTemplate(tmpl, "prlabeler", td)
}

func writeTemplate(body string, templateName string, td TemplateData) {
	// If the file doesn't exist, create it, or append to the file
	f, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("error opening file (%s): %s", filename, err)
	}

	tplate, err := template.New(templateName).Parse(body)
	if err != nil {
		log.Fatalf("error parsing template: %s", err)
	}

	var buffer bytes.Buffer
	err = tplate.Execute(&buffer, td)
	if err != nil {
		log.Fatalf("error executing template: %s", err)
	}

	if _, err := f.Write(buffer.Bytes()); err != nil {
		f.Close()
		log.Fatalf("error writing to file (%s): %s", filename, err)
	}

	if err := f.Close(); err != nil {
		log.Fatalf("error closing file (%s): %s", filename, err)
	}
}

var tmpl = `# Generated by internal/generate/prlabeler/main.go; DO NOT EDIT.

client-connections:
  - 'internal/conns/**/*'
create:
  - 'internal/create/**/*'
dependencies:
  - '.github/dependabot.yml'
documentation:
  - '**/*.md'
  - 'docs/**/*'
  - 'website/**/*'
examples:
  - 'examples/**/*'
flex:
  - 'internal/flex/**/*'
generators:
  - 'internal/**/*_gen.go'
  - 'internal/**/*_gen_test.go'
  - 'internal/**/generate.go'
  - 'internal/generate/**/*'
github_actions:
  - '.github/*.yml'
  - '.github/workflows/*.yml'
linter:
  - '.github/workflows/acctest-terraform-lint.yml'
  - '.github/workflows/terraform_provider.yml'
  - '.github/workflows/website.yml'
  - '.golangci.yml'
  - '.markdownlinkcheck.json'
  - '.markdownlint.yml'
  - '.semgrep.yml'
  - '.tflint.hcl'
  - 'providerlint/**/*'
  - 'staticcheck.conf'
pre-service-packages:
  - '**/data_source_aws_*'
  - '**/resource_aws_*'
  - 'aws/**/*'
  - 'awsproviderlint/**/*'
provider:
  - '.gitignore'
  - '.go-version'
  - '*.md'
  - 'docs/contributing/**/*'
  - 'internal/provider/**/*'
  - 'main.go'
  - 'website/docs/index.html.markdown'
repository:
  - '.github/**/*'
  - 'GNUmakefile'
  - 'infrastructure/**/*'
sweeper:
  - 'internal/sweep/**/*'
  - 'internal/service/**/sweep.go'
tags:
  - 'internal/**/tag_gen.go'
  - 'internal/**/tag_gen_test.go'
  - 'internal/**/tag_test.go'
  - 'internal/**/tags_gen.go'
  - 'internal/tags/**/*'
tests:
  - '**/*_test.go'
  - 'internal/**/test-fixtures/**/*'
  - 'internal/**/testdata/**/*'
  - 'internal/acctest/**/*'
verify:
  - 'internal/verify/**/*'
{{- range .Services }}
service/{{ .ProviderPackage }}:
  - 'internal/service/{{ .ActualPackage }}/**/{{ .FilePrefix }}*'
  - 'website/**/{{ .DocPrefix }}*'
{{- end }}
`
