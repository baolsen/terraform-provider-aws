//go:build generate
// +build generate

package main

import (
	"bytes"
	"encoding/csv"
	"go/format"
	"log"
	"os"
	"sort"
	"text/template"
)

const filename = `awsclient_gen.go`

type ServiceDatum struct {
	SDKVersion        string
	GoPackage         string
	ProviderNameUpper string
	ClientName        string
}

type TemplateData struct {
	Services []ServiceDatum
}

const (
	// column indices of CSV
	//awsCLIV2Command         = 0
	//awsCLIV2CommandNoDashes = 1
	//goV1Package             = 2
	//goV2Package             = 3
	//providerPackageActual   = 4
	//providerPackageCorrect  = 5
	//splitPackageRealPackage = 6
	//aliases                 = 7
	//providerNameUpper       = 8
	//goV1ClientName          = 9
	//skipClientGenerate      = 10
	//sdkVersion              = 11
	//resourcePrefixActual    = 12
	//resourcePrefixCorrect   = 13
	//filePrefix              = 14
	//docPrefix               = 15
	//humanFriendly           = 16
	//brand                   = 17
	//exclude                 = 18
	//allowedSubcategory      = 19
	//deprecatedEnvVar        = 20
	//envVar                  = 21
	//note                    = 22
	goV1Package            = 2
	goV2Package            = 3
	providerPackageActual  = 4
	providerPackageCorrect = 5
	providerNameUpper      = 8
	goV1ClientName         = 9
	sdkVersion             = 11
	exclude                = 18
)

func main() {
	f, err := os.Open("../../names/names_data.csv")
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	csvReader := csv.NewReader(f)

	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	td := TemplateData{}

	for i, l := range data {
		if i < 1 { // no header
			continue
		}

		if l[exclude] != "" {
			continue
		}

		if l[providerPackageActual] == "" && l[providerPackageCorrect] == "" {
			continue
		}

		s := ServiceDatum{
			ProviderNameUpper: l[providerNameUpper],
			SDKVersion:        l[sdkVersion],
		}

		if l[sdkVersion] == "1" {
			s.GoPackage = l[goV1Package]
			s.ClientName = l[goV1ClientName]
		} else {
			s.GoPackage = l[goV2Package]
			s.ClientName = "Client"
		}

		td.Services = append(td.Services, s)
	}

	sort.SliceStable(td.Services, func(i, j int) bool {
		return td.Services[i].ProviderNameUpper < td.Services[j].ProviderNameUpper
	})

	writeTemplate(tmpl, "awsclient", td)
}

func writeTemplate(body string, templateName string, td TemplateData) {
	// If the file doesn't exist, create it, or append to the file
	f, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("error opening file (%s): %s", filename, err)
	}

	tplate, err := template.New(templateName).Parse(body)
	if err != nil {
		log.Fatalf("error parsing template: %s", err)
	}

	var buffer bytes.Buffer
	err = tplate.Execute(&buffer, td)
	if err != nil {
		log.Fatalf("error executing template: %s", err)
	}

	contents, err := format.Source(buffer.Bytes())
	if err != nil {
		log.Fatalf("error formatting generated file: %s", err)
	}

	if _, err := f.Write(contents); err != nil {
		f.Close()
		log.Fatalf("error writing to file (%s): %s", filename, err)
	}

	if err := f.Close(); err != nil {
		log.Fatalf("error closing file (%s): %s", filename, err)
	}
}

var tmpl = `
// Code generated by internal/generate/awsclient/main.go; DO NOT EDIT.
package conns

import (
	"fmt"


{{ range .Services }}
	"github.com/aws/aws-sdk-go{{ if eq .SDKVersion "2" }}-v2{{ end }}/service/{{ .GoPackage }}"
{{- end }}
	"github.com/aws/aws-sdk-go/aws/session"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
)

type AWSClient struct {
	AccountID                 string
	DefaultTagsConfig         *tftags.DefaultConfig
	DNSSuffix                 string
	IgnoreTagsConfig          *tftags.IgnoreConfig
	MediaConvertAccountConn   *mediaconvert.MediaConvert
	Partition                 string
	Region                    string
	ReverseDNSPrefix          string
	S3ConnURICleaningDisabled *s3.S3
	Session                   *session.Session
	SupportedPlatforms        []string
	TerraformVersion          string

	{{ range .Services }}
	{{ .ProviderNameUpper }}Conn *{{ .GoPackage }}.{{ .ClientName }}
	{{- end }}
}

// PartitionHostname returns a hostname with the provider domain suffix for the partition
// e.g. PREFIX.amazonaws.com
// The prefix should not contain a trailing period.
func (client *AWSClient) PartitionHostname(prefix string) string {
	return fmt.Sprintf("%s.%s", prefix, client.DNSSuffix)
}

// RegionalHostname returns a hostname with the provider domain suffix for the region and partition
// e.g. PREFIX.us-west-2.amazonaws.com
// The prefix should not contain a trailing period.
func (client *AWSClient) RegionalHostname(prefix string) string {
	return fmt.Sprintf("%s.%s.%s", prefix, client.Region, client.DNSSuffix)
}
`
