//go:build generate
// +build generate

package main

import (
	"bytes"
	"encoding/csv"
	"log"
	"os"
	"sort"
	"text/template"
)

const filename = `../../../.github/labeler-issue-triage.yml`

type ServiceDatum struct {
	ProviderPackage string
	RegExp          string
}

type TemplateData struct {
	Services []ServiceDatum
}

const (
	// column indices of CSV
	//awsCLIV2Command         = 0
	//awsCLIV2CommandNoDashes = 1
	//goV1Package             = 2
	//goV2Package             = 3
	//providerPackageActual   = 4
	//providerPackageCorrect  = 5
	//aliases                 = 6
	//providerNameUpper       = 7
	//goV1ClientName          = 8
	//skipClientGenerate      = 9
	//sdkVersion              = 10
	//resourcePrefixActual    = 11
	//resourcePrefixCorrect   = 12
	//humanFriendly           = 13
	//brand                   = 14
	//exclude                 = 15
	//allowedSubcategory      = 16
	//deprecatedEnvVar        = 17
	//envVar                  = 18
	//note                    = 19
	providerPackageActual  = 4
	providerPackageCorrect = 5
	resourcePrefixActual   = 11
	resourcePrefixCorrect  = 12
	exclude                = 15
	allowedSubcategory     = 16
)

func main() {
	f, err := os.Open("../../../names/names_data.csv")
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	csvReader := csv.NewReader(f)

	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	td := TemplateData{}

	for i, l := range data {
		if i < 1 { // no header
			continue
		}

		if l[exclude] != "" && l[allowedSubcategory] == "" {
			continue
		}

		if l[providerPackageActual] == "" && l[providerPackageCorrect] == "" {
			continue
		}

		if l[resourcePrefixCorrect] == "" && l[resourcePrefixActual] == "" {
			continue
		}

		p := l[providerPackageCorrect]

		if l[providerPackageActual] != "" {
			p = l[providerPackageActual]
		}

		rp := l[resourcePrefixCorrect]

		if l[resourcePrefixActual] != "" {
			rp = l[resourcePrefixActual]
		}

		s := ServiceDatum{
			ProviderPackage: p,
			RegExp:          `((\*|-)\s*` + "`" + `?|(data|resource)\s+"?)` + rp,
		}

		td.Services = append(td.Services, s)
	}

	sort.SliceStable(td.Services, func(i, j int) bool {
		return td.Services[i].ProviderPackage < td.Services[j].ProviderPackage
	})

	writeTemplate(tmpl, "labeler", td)
}

func writeTemplate(body string, templateName string, td TemplateData) {
	// If the file doesn't exist, create it, or append to the file
	f, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("error opening file (%s): %s", filename, err)
	}

	tplate, err := template.New(templateName).Parse(body)
	if err != nil {
		log.Fatalf("error parsing template: %s", err)
	}

	var buffer bytes.Buffer
	err = tplate.Execute(&buffer, td)
	if err != nil {
		log.Fatalf("error executing template: %s", err)
	}

	if _, err := f.Write(buffer.Bytes()); err != nil {
		f.Close()
		log.Fatalf("error writing to file (%s): %s", filename, err)
	}

	if err := f.Close(); err != nil {
		log.Fatalf("error closing file (%s): %s", filename, err)
	}
}

var tmpl = `# Generated by internal/generate/triagelabeler/main.go; DO NOT EDIT.

bug:
  # General:
  #   panic:
  # AWS SDK Go:
  #   ValidationException:.*failed to satisfy constraint: Member must not be null
  # Terraform CLI:
  #   Provider produced inconsistent final plan
  #   Provider produced inconsistent result after apply
  #   produced an invalid new value
  #   produced an unexpected new value
  # Terraform Plugin SDK:
  #   doesn't support update
  #   Invalid address to set
  - "(doesn't support update|failed to satisfy constraint: Member must not be null|Invalid address to set|panic:|produced an (invalid|unexpected) new value|Provider produced inconsistent (final plan|result after apply))"
crash:
  - 'panic:'
sweeper:
  - 'sweeper'
#
# AWS Per-Service Labeling
#
# Catch the following:
# 1. List items (* or -) with aws_XXX resource prefix (with or without backticks)
# 2. "data aws_XXX" or "resource aws_XXX"
{{- range .Services }}
service/{{ .ProviderPackage }}:
  - '{{ .RegExp }}'
{{- end }}
`
