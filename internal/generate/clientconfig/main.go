//go:build generate
// +build generate

package main

import (
	"bytes"
	"encoding/csv"
	"go/format"
	"log"
	"os"
	"text/template"
)

const filename = `config_gen.go`

type ServiceDatum struct {
	SDKVersion        string
	GoPackage         string
	ProviderNameUpper string
}

type TemplateData struct {
	Services []ServiceDatum
}

const (
	// column indices of CSV
	//awsCLIV2Command         = 0
	//awsCLIV2CommandNoDashes = 1
	//providerPackageActual   = 4
	//providerPackageCorrect  = 5
	//aliases                 = 8
	//goV1ClientName          = 9
	//humanFriendly           = 10
	//brand                   = 11
	//note                    = 12
	//deprecatedEnvVar        = 14
	//envVar                  = 15
	goV1Package         = 2
	goV2Package         = 3
	providerPackageBoth = 6
	providerNameUpper   = 7
	exclude             = 13
	sdkVersion          = 16
	skipClientGenerate  = 17
)

func main() {
	f, err := os.Open("../../names/names_data.csv")
	if err != nil {
		log.Fatal(err)
	}

	defer f.Close()

	csvReader := csv.NewReader(f)

	data, err := csvReader.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	td := TemplateData{}

	for i, l := range data {
		if i > 0 { // no header
			if l[exclude] != "" || l[skipClientGenerate] != "" || l[providerPackageBoth] == "" {
				continue
			}

			s := ServiceDatum{
				ProviderNameUpper: l[providerNameUpper],
				SDKVersion:        l[sdkVersion],
			}

			if l[sdkVersion] == "1" {
				s.GoPackage = l[goV1Package]
			} else {
				s.GoPackage = l[goV2Package]
			}

			td.Services = append(td.Services, s)
		}
	}

	writeTemplate(tmpl, "awsclient", td)
}

func writeTemplate(body string, templateName string, td TemplateData) {
	// If the file doesn't exist, create it, or append to the file
	f, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("error opening file (%s): %s", filename, err)
	}

	tplate, err := template.New(templateName).Parse(body)
	if err != nil {
		log.Fatalf("error parsing template: %s", err)
	}

	var buffer bytes.Buffer
	err = tplate.Execute(&buffer, td)
	if err != nil {
		log.Fatalf("error executing template: %s", err)
	}

	contents, err := format.Source(buffer.Bytes())
	if err != nil {
		log.Fatalf("error formatting generated file: %s", err)
	}

	if _, err := f.Write(contents); err != nil {
		f.Close()
		log.Fatalf("error writing to file (%s): %s", filename, err)
	}

	if err := f.Close(); err != nil {
		log.Fatalf("error closing file (%s): %s", filename, err)
	}
}

var tmpl = `
// Code generated by internal/generate/clientconfig/main.go; DO NOT EDIT.
package conns

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
{{- range .Services }}
	"github.com/aws/aws-sdk-go{{ if eq .SDKVersion "2" }}-v2{{ end }}/service/{{ .GoPackage }}"
{{- end }}
	"github.com/hashicorp/terraform-provider-aws/names"
)

func (c *Config) generatedClientConns(sess *session.Session) *AWSClient {
	return &AWSClient{
		{{- range .Services }}
		{{ .ProviderNameUpper }}Conn: {{ .GoPackage }}.New(sess.Copy(&aws.Config{Endpoint: aws.String(c.Endpoints[names.{{ .ProviderNameUpper }}])})),
		{{- end }}
	}
}
`
